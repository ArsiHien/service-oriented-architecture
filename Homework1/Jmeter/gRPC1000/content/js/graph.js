/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 292.0, "minX": 0.0, "maxY": 2158.0, "series": [{"data": [[0.0, 292.0], [0.1, 308.0], [0.2, 328.0], [0.3, 328.0], [0.4, 340.0], [0.5, 346.0], [0.6, 347.0], [0.7, 348.0], [0.8, 349.0], [0.9, 350.0], [1.0, 356.0], [1.1, 375.0], [1.2, 387.0], [1.3, 392.0], [1.4, 392.0], [1.5, 397.0], [1.6, 398.0], [1.7, 398.0], [1.8, 408.0], [1.9, 416.0], [2.0, 432.0], [2.1, 439.0], [2.2, 444.0], [2.3, 450.0], [2.4, 488.0], [2.5, 497.0], [2.6, 521.0], [2.7, 527.0], [2.8, 550.0], [2.9, 563.0], [3.0, 565.0], [3.1, 570.0], [3.2, 591.0], [3.3, 594.0], [3.4, 598.0], [3.5, 598.0], [3.6, 611.0], [3.7, 623.0], [3.8, 635.0], [3.9, 641.0], [4.0, 642.0], [4.1, 656.0], [4.2, 665.0], [4.3, 673.0], [4.4, 682.0], [4.5, 685.0], [4.6, 689.0], [4.7, 691.0], [4.8, 693.0], [4.9, 697.0], [5.0, 698.0], [5.1, 699.0], [5.2, 707.0], [5.3, 712.0], [5.4, 720.0], [5.5, 721.0], [5.6, 722.0], [5.7, 722.0], [5.8, 723.0], [5.9, 724.0], [6.0, 727.0], [6.1, 728.0], [6.2, 738.0], [6.3, 738.0], [6.4, 740.0], [6.5, 748.0], [6.6, 752.0], [6.7, 757.0], [6.8, 760.0], [6.9, 761.0], [7.0, 761.0], [7.1, 762.0], [7.2, 769.0], [7.3, 775.0], [7.4, 783.0], [7.5, 783.0], [7.6, 796.0], [7.7, 797.0], [7.8, 797.0], [7.9, 799.0], [8.0, 799.0], [8.1, 801.0], [8.2, 803.0], [8.3, 804.0], [8.4, 806.0], [8.5, 811.0], [8.6, 813.0], [8.7, 815.0], [8.8, 818.0], [8.9, 820.0], [9.0, 822.0], [9.1, 825.0], [9.2, 827.0], [9.3, 828.0], [9.4, 831.0], [9.5, 834.0], [9.6, 835.0], [9.7, 835.0], [9.8, 836.0], [9.9, 840.0], [10.0, 845.0], [10.1, 846.0], [10.2, 852.0], [10.3, 852.0], [10.4, 854.0], [10.5, 866.0], [10.6, 866.0], [10.7, 867.0], [10.8, 868.0], [10.9, 870.0], [11.0, 870.0], [11.1, 873.0], [11.2, 874.0], [11.3, 875.0], [11.4, 878.0], [11.5, 879.0], [11.6, 880.0], [11.7, 892.0], [11.8, 893.0], [11.9, 893.0], [12.0, 895.0], [12.1, 899.0], [12.2, 900.0], [12.3, 901.0], [12.4, 902.0], [12.5, 906.0], [12.6, 911.0], [12.7, 918.0], [12.8, 920.0], [12.9, 922.0], [13.0, 923.0], [13.1, 930.0], [13.2, 935.0], [13.3, 940.0], [13.4, 942.0], [13.5, 947.0], [13.6, 948.0], [13.7, 948.0], [13.8, 948.0], [13.9, 949.0], [14.0, 953.0], [14.1, 954.0], [14.2, 954.0], [14.3, 957.0], [14.4, 957.0], [14.5, 961.0], [14.6, 961.0], [14.7, 962.0], [14.8, 963.0], [14.9, 966.0], [15.0, 971.0], [15.1, 973.0], [15.2, 975.0], [15.3, 977.0], [15.4, 977.0], [15.5, 978.0], [15.6, 979.0], [15.7, 980.0], [15.8, 981.0], [15.9, 982.0], [16.0, 986.0], [16.1, 987.0], [16.2, 988.0], [16.3, 989.0], [16.4, 990.0], [16.5, 990.0], [16.6, 991.0], [16.7, 995.0], [16.8, 998.0], [16.9, 999.0], [17.0, 999.0], [17.1, 999.0], [17.2, 1003.0], [17.3, 1004.0], [17.4, 1007.0], [17.5, 1008.0], [17.6, 1009.0], [17.7, 1012.0], [17.8, 1015.0], [17.9, 1019.0], [18.0, 1020.0], [18.1, 1020.0], [18.2, 1020.0], [18.3, 1020.0], [18.4, 1020.0], [18.5, 1021.0], [18.6, 1021.0], [18.7, 1021.0], [18.8, 1022.0], [18.9, 1029.0], [19.0, 1029.0], [19.1, 1030.0], [19.2, 1030.0], [19.3, 1030.0], [19.4, 1031.0], [19.5, 1033.0], [19.6, 1033.0], [19.7, 1033.0], [19.8, 1034.0], [19.9, 1035.0], [20.0, 1037.0], [20.1, 1038.0], [20.2, 1040.0], [20.3, 1041.0], [20.4, 1041.0], [20.5, 1043.0], [20.6, 1044.0], [20.7, 1044.0], [20.8, 1045.0], [20.9, 1046.0], [21.0, 1049.0], [21.1, 1050.0], [21.2, 1050.0], [21.3, 1051.0], [21.4, 1051.0], [21.5, 1052.0], [21.6, 1053.0], [21.7, 1054.0], [21.8, 1055.0], [21.9, 1055.0], [22.0, 1057.0], [22.1, 1059.0], [22.2, 1059.0], [22.3, 1059.0], [22.4, 1061.0], [22.5, 1063.0], [22.6, 1064.0], [22.7, 1064.0], [22.8, 1065.0], [22.9, 1066.0], [23.0, 1068.0], [23.1, 1068.0], [23.2, 1070.0], [23.3, 1074.0], [23.4, 1074.0], [23.5, 1076.0], [23.6, 1077.0], [23.7, 1077.0], [23.8, 1078.0], [23.9, 1080.0], [24.0, 1081.0], [24.1, 1081.0], [24.2, 1081.0], [24.3, 1081.0], [24.4, 1082.0], [24.5, 1084.0], [24.6, 1087.0], [24.7, 1087.0], [24.8, 1091.0], [24.9, 1092.0], [25.0, 1094.0], [25.1, 1095.0], [25.2, 1097.0], [25.3, 1105.0], [25.4, 1108.0], [25.5, 1108.0], [25.6, 1109.0], [25.7, 1111.0], [25.8, 1120.0], [25.9, 1121.0], [26.0, 1123.0], [26.1, 1124.0], [26.2, 1124.0], [26.3, 1125.0], [26.4, 1125.0], [26.5, 1126.0], [26.6, 1130.0], [26.7, 1130.0], [26.8, 1136.0], [26.9, 1137.0], [27.0, 1137.0], [27.1, 1140.0], [27.2, 1143.0], [27.3, 1144.0], [27.4, 1146.0], [27.5, 1146.0], [27.6, 1149.0], [27.7, 1151.0], [27.8, 1154.0], [27.9, 1157.0], [28.0, 1157.0], [28.1, 1161.0], [28.2, 1162.0], [28.3, 1168.0], [28.4, 1172.0], [28.5, 1177.0], [28.6, 1188.0], [28.7, 1189.0], [28.8, 1190.0], [28.9, 1192.0], [29.0, 1192.0], [29.1, 1195.0], [29.2, 1196.0], [29.3, 1197.0], [29.4, 1198.0], [29.5, 1199.0], [29.6, 1201.0], [29.7, 1201.0], [29.8, 1204.0], [29.9, 1205.0], [30.0, 1206.0], [30.1, 1211.0], [30.2, 1214.0], [30.3, 1215.0], [30.4, 1216.0], [30.5, 1217.0], [30.6, 1218.0], [30.7, 1218.0], [30.8, 1220.0], [30.9, 1224.0], [31.0, 1226.0], [31.1, 1228.0], [31.2, 1228.0], [31.3, 1231.0], [31.4, 1232.0], [31.5, 1233.0], [31.6, 1234.0], [31.7, 1236.0], [31.8, 1237.0], [31.9, 1238.0], [32.0, 1240.0], [32.1, 1241.0], [32.2, 1242.0], [32.3, 1244.0], [32.4, 1245.0], [32.5, 1245.0], [32.6, 1247.0], [32.7, 1249.0], [32.8, 1249.0], [32.9, 1251.0], [33.0, 1253.0], [33.1, 1253.0], [33.2, 1254.0], [33.3, 1255.0], [33.4, 1256.0], [33.5, 1258.0], [33.6, 1259.0], [33.7, 1263.0], [33.8, 1263.0], [33.9, 1264.0], [34.0, 1265.0], [34.1, 1266.0], [34.2, 1266.0], [34.3, 1267.0], [34.4, 1270.0], [34.5, 1270.0], [34.6, 1272.0], [34.7, 1276.0], [34.8, 1276.0], [34.9, 1277.0], [35.0, 1277.0], [35.1, 1277.0], [35.2, 1277.0], [35.3, 1279.0], [35.4, 1279.0], [35.5, 1284.0], [35.6, 1285.0], [35.7, 1286.0], [35.8, 1288.0], [35.9, 1292.0], [36.0, 1292.0], [36.1, 1294.0], [36.2, 1296.0], [36.3, 1297.0], [36.4, 1298.0], [36.5, 1300.0], [36.6, 1301.0], [36.7, 1303.0], [36.8, 1306.0], [36.9, 1308.0], [37.0, 1310.0], [37.1, 1310.0], [37.2, 1311.0], [37.3, 1311.0], [37.4, 1311.0], [37.5, 1313.0], [37.6, 1313.0], [37.7, 1314.0], [37.8, 1316.0], [37.9, 1316.0], [38.0, 1316.0], [38.1, 1316.0], [38.2, 1317.0], [38.3, 1317.0], [38.4, 1317.0], [38.5, 1317.0], [38.6, 1318.0], [38.7, 1319.0], [38.8, 1319.0], [38.9, 1320.0], [39.0, 1320.0], [39.1, 1320.0], [39.2, 1320.0], [39.3, 1322.0], [39.4, 1326.0], [39.5, 1326.0], [39.6, 1327.0], [39.7, 1329.0], [39.8, 1330.0], [39.9, 1330.0], [40.0, 1332.0], [40.1, 1334.0], [40.2, 1336.0], [40.3, 1338.0], [40.4, 1338.0], [40.5, 1340.0], [40.6, 1341.0], [40.7, 1343.0], [40.8, 1343.0], [40.9, 1343.0], [41.0, 1345.0], [41.1, 1346.0], [41.2, 1347.0], [41.3, 1347.0], [41.4, 1350.0], [41.5, 1350.0], [41.6, 1350.0], [41.7, 1351.0], [41.8, 1356.0], [41.9, 1358.0], [42.0, 1360.0], [42.1, 1360.0], [42.2, 1361.0], [42.3, 1361.0], [42.4, 1362.0], [42.5, 1362.0], [42.6, 1362.0], [42.7, 1362.0], [42.8, 1365.0], [42.9, 1365.0], [43.0, 1366.0], [43.1, 1366.0], [43.2, 1366.0], [43.3, 1366.0], [43.4, 1366.0], [43.5, 1369.0], [43.6, 1369.0], [43.7, 1370.0], [43.8, 1371.0], [43.9, 1372.0], [44.0, 1373.0], [44.1, 1374.0], [44.2, 1374.0], [44.3, 1375.0], [44.4, 1375.0], [44.5, 1375.0], [44.6, 1377.0], [44.7, 1378.0], [44.8, 1378.0], [44.9, 1379.0], [45.0, 1380.0], [45.1, 1380.0], [45.2, 1380.0], [45.3, 1381.0], [45.4, 1381.0], [45.5, 1382.0], [45.6, 1383.0], [45.7, 1383.0], [45.8, 1385.0], [45.9, 1386.0], [46.0, 1386.0], [46.1, 1387.0], [46.2, 1388.0], [46.3, 1389.0], [46.4, 1390.0], [46.5, 1390.0], [46.6, 1390.0], [46.7, 1390.0], [46.8, 1395.0], [46.9, 1397.0], [47.0, 1397.0], [47.1, 1397.0], [47.2, 1397.0], [47.3, 1398.0], [47.4, 1402.0], [47.5, 1405.0], [47.6, 1408.0], [47.7, 1408.0], [47.8, 1410.0], [47.9, 1412.0], [48.0, 1412.0], [48.1, 1414.0], [48.2, 1414.0], [48.3, 1416.0], [48.4, 1418.0], [48.5, 1419.0], [48.6, 1421.0], [48.7, 1421.0], [48.8, 1423.0], [48.9, 1428.0], [49.0, 1428.0], [49.1, 1428.0], [49.2, 1428.0], [49.3, 1429.0], [49.4, 1429.0], [49.5, 1430.0], [49.6, 1434.0], [49.7, 1435.0], [49.8, 1435.0], [49.9, 1435.0], [50.0, 1436.0], [50.1, 1436.0], [50.2, 1436.0], [50.3, 1436.0], [50.4, 1436.0], [50.5, 1436.0], [50.6, 1436.0], [50.7, 1436.0], [50.8, 1436.0], [50.9, 1436.0], [51.0, 1437.0], [51.1, 1437.0], [51.2, 1437.0], [51.3, 1437.0], [51.4, 1437.0], [51.5, 1438.0], [51.6, 1438.0], [51.7, 1438.0], [51.8, 1438.0], [51.9, 1438.0], [52.0, 1438.0], [52.1, 1440.0], [52.2, 1440.0], [52.3, 1442.0], [52.4, 1442.0], [52.5, 1444.0], [52.6, 1444.0], [52.7, 1444.0], [52.8, 1446.0], [52.9, 1447.0], [53.0, 1447.0], [53.1, 1452.0], [53.2, 1452.0], [53.3, 1452.0], [53.4, 1453.0], [53.5, 1457.0], [53.6, 1458.0], [53.7, 1462.0], [53.8, 1463.0], [53.9, 1466.0], [54.0, 1467.0], [54.1, 1469.0], [54.2, 1471.0], [54.3, 1471.0], [54.4, 1471.0], [54.5, 1472.0], [54.6, 1473.0], [54.7, 1473.0], [54.8, 1473.0], [54.9, 1475.0], [55.0, 1476.0], [55.1, 1478.0], [55.2, 1478.0], [55.3, 1480.0], [55.4, 1481.0], [55.5, 1481.0], [55.6, 1484.0], [55.7, 1487.0], [55.8, 1487.0], [55.9, 1488.0], [56.0, 1496.0], [56.1, 1497.0], [56.2, 1497.0], [56.3, 1497.0], [56.4, 1497.0], [56.5, 1498.0], [56.6, 1500.0], [56.7, 1504.0], [56.8, 1507.0], [56.9, 1509.0], [57.0, 1513.0], [57.1, 1514.0], [57.2, 1518.0], [57.3, 1518.0], [57.4, 1521.0], [57.5, 1521.0], [57.6, 1524.0], [57.7, 1526.0], [57.8, 1527.0], [57.9, 1527.0], [58.0, 1530.0], [58.1, 1532.0], [58.2, 1532.0], [58.3, 1533.0], [58.4, 1533.0], [58.5, 1533.0], [58.6, 1533.0], [58.7, 1533.0], [58.8, 1533.0], [58.9, 1534.0], [59.0, 1534.0], [59.1, 1534.0], [59.2, 1535.0], [59.3, 1536.0], [59.4, 1537.0], [59.5, 1537.0], [59.6, 1538.0], [59.7, 1541.0], [59.8, 1541.0], [59.9, 1544.0], [60.0, 1546.0], [60.1, 1547.0], [60.2, 1548.0], [60.3, 1548.0], [60.4, 1549.0], [60.5, 1550.0], [60.6, 1551.0], [60.7, 1551.0], [60.8, 1551.0], [60.9, 1552.0], [61.0, 1553.0], [61.1, 1554.0], [61.2, 1556.0], [61.3, 1557.0], [61.4, 1558.0], [61.5, 1559.0], [61.6, 1559.0], [61.7, 1559.0], [61.8, 1560.0], [61.9, 1560.0], [62.0, 1560.0], [62.1, 1561.0], [62.2, 1562.0], [62.3, 1562.0], [62.4, 1562.0], [62.5, 1562.0], [62.6, 1562.0], [62.7, 1563.0], [62.8, 1563.0], [62.9, 1564.0], [63.0, 1564.0], [63.1, 1564.0], [63.2, 1564.0], [63.3, 1567.0], [63.4, 1567.0], [63.5, 1568.0], [63.6, 1569.0], [63.7, 1574.0], [63.8, 1577.0], [63.9, 1579.0], [64.0, 1581.0], [64.1, 1582.0], [64.2, 1583.0], [64.3, 1589.0], [64.4, 1594.0], [64.5, 1598.0], [64.6, 1600.0], [64.7, 1600.0], [64.8, 1601.0], [64.9, 1602.0], [65.0, 1603.0], [65.1, 1603.0], [65.2, 1604.0], [65.3, 1605.0], [65.4, 1605.0], [65.5, 1608.0], [65.6, 1612.0], [65.7, 1612.0], [65.8, 1615.0], [65.9, 1620.0], [66.0, 1622.0], [66.1, 1626.0], [66.2, 1628.0], [66.3, 1629.0], [66.4, 1629.0], [66.5, 1633.0], [66.6, 1633.0], [66.7, 1634.0], [66.8, 1636.0], [66.9, 1636.0], [67.0, 1637.0], [67.1, 1637.0], [67.2, 1639.0], [67.3, 1640.0], [67.4, 1640.0], [67.5, 1642.0], [67.6, 1642.0], [67.7, 1643.0], [67.8, 1643.0], [67.9, 1643.0], [68.0, 1643.0], [68.1, 1646.0], [68.2, 1647.0], [68.3, 1647.0], [68.4, 1647.0], [68.5, 1648.0], [68.6, 1648.0], [68.7, 1651.0], [68.8, 1653.0], [68.9, 1654.0], [69.0, 1654.0], [69.1, 1654.0], [69.2, 1654.0], [69.3, 1655.0], [69.4, 1656.0], [69.5, 1657.0], [69.6, 1659.0], [69.7, 1659.0], [69.8, 1659.0], [69.9, 1660.0], [70.0, 1660.0], [70.1, 1660.0], [70.2, 1660.0], [70.3, 1660.0], [70.4, 1661.0], [70.5, 1661.0], [70.6, 1661.0], [70.7, 1664.0], [70.8, 1665.0], [70.9, 1666.0], [71.0, 1666.0], [71.1, 1666.0], [71.2, 1666.0], [71.3, 1666.0], [71.4, 1674.0], [71.5, 1675.0], [71.6, 1676.0], [71.7, 1678.0], [71.8, 1678.0], [71.9, 1678.0], [72.0, 1678.0], [72.1, 1679.0], [72.2, 1682.0], [72.3, 1682.0], [72.4, 1682.0], [72.5, 1683.0], [72.6, 1689.0], [72.7, 1693.0], [72.8, 1696.0], [72.9, 1700.0], [73.0, 1700.0], [73.1, 1700.0], [73.2, 1701.0], [73.3, 1704.0], [73.4, 1705.0], [73.5, 1710.0], [73.6, 1712.0], [73.7, 1712.0], [73.8, 1713.0], [73.9, 1715.0], [74.0, 1720.0], [74.1, 1721.0], [74.2, 1722.0], [74.3, 1723.0], [74.4, 1724.0], [74.5, 1724.0], [74.6, 1724.0], [74.7, 1724.0], [74.8, 1724.0], [74.9, 1725.0], [75.0, 1725.0], [75.1, 1726.0], [75.2, 1726.0], [75.3, 1727.0], [75.4, 1727.0], [75.5, 1728.0], [75.6, 1728.0], [75.7, 1728.0], [75.8, 1731.0], [75.9, 1732.0], [76.0, 1736.0], [76.1, 1737.0], [76.2, 1737.0], [76.3, 1737.0], [76.4, 1737.0], [76.5, 1738.0], [76.6, 1738.0], [76.7, 1739.0], [76.8, 1742.0], [76.9, 1744.0], [77.0, 1744.0], [77.1, 1746.0], [77.2, 1748.0], [77.3, 1753.0], [77.4, 1753.0], [77.5, 1754.0], [77.6, 1754.0], [77.7, 1764.0], [77.8, 1764.0], [77.9, 1765.0], [78.0, 1768.0], [78.1, 1769.0], [78.2, 1769.0], [78.3, 1772.0], [78.4, 1773.0], [78.5, 1775.0], [78.6, 1778.0], [78.7, 1779.0], [78.8, 1779.0], [78.9, 1782.0], [79.0, 1783.0], [79.1, 1785.0], [79.2, 1787.0], [79.3, 1787.0], [79.4, 1788.0], [79.5, 1789.0], [79.6, 1791.0], [79.7, 1791.0], [79.8, 1800.0], [79.9, 1802.0], [80.0, 1807.0], [80.1, 1809.0], [80.2, 1809.0], [80.3, 1816.0], [80.4, 1820.0], [80.5, 1821.0], [80.6, 1821.0], [80.7, 1822.0], [80.8, 1823.0], [80.9, 1826.0], [81.0, 1826.0], [81.1, 1826.0], [81.2, 1833.0], [81.3, 1836.0], [81.4, 1837.0], [81.5, 1837.0], [81.6, 1837.0], [81.7, 1837.0], [81.8, 1838.0], [81.9, 1838.0], [82.0, 1838.0], [82.1, 1839.0], [82.2, 1839.0], [82.3, 1841.0], [82.4, 1843.0], [82.5, 1843.0], [82.6, 1844.0], [82.7, 1844.0], [82.8, 1845.0], [82.9, 1845.0], [83.0, 1846.0], [83.1, 1847.0], [83.2, 1853.0], [83.3, 1857.0], [83.4, 1860.0], [83.5, 1861.0], [83.6, 1863.0], [83.7, 1863.0], [83.8, 1863.0], [83.9, 1864.0], [84.0, 1864.0], [84.1, 1865.0], [84.2, 1865.0], [84.3, 1865.0], [84.4, 1865.0], [84.5, 1866.0], [84.6, 1866.0], [84.7, 1869.0], [84.8, 1869.0], [84.9, 1875.0], [85.0, 1877.0], [85.1, 1879.0], [85.2, 1884.0], [85.3, 1885.0], [85.4, 1886.0], [85.5, 1888.0], [85.6, 1888.0], [85.7, 1893.0], [85.8, 1896.0], [85.9, 1896.0], [86.0, 1899.0], [86.1, 1902.0], [86.2, 1903.0], [86.3, 1905.0], [86.4, 1905.0], [86.5, 1907.0], [86.6, 1909.0], [86.7, 1910.0], [86.8, 1912.0], [86.9, 1923.0], [87.0, 1930.0], [87.1, 1932.0], [87.2, 1933.0], [87.3, 1937.0], [87.4, 1939.0], [87.5, 1945.0], [87.6, 1948.0], [87.7, 1949.0], [87.8, 1951.0], [87.9, 1953.0], [88.0, 1956.0], [88.1, 1960.0], [88.2, 1960.0], [88.3, 1960.0], [88.4, 1960.0], [88.5, 1960.0], [88.6, 1961.0], [88.7, 1962.0], [88.8, 1964.0], [88.9, 1965.0], [89.0, 1968.0], [89.1, 1970.0], [89.2, 1970.0], [89.3, 1970.0], [89.4, 1973.0], [89.5, 1974.0], [89.6, 1974.0], [89.7, 1976.0], [89.8, 1978.0], [89.9, 1979.0], [90.0, 1979.0], [90.1, 1979.0], [90.2, 1979.0], [90.3, 1980.0], [90.4, 1980.0], [90.5, 1980.0], [90.6, 1981.0], [90.7, 1981.0], [90.8, 1984.0], [90.9, 1984.0], [91.0, 1988.0], [91.1, 1988.0], [91.2, 1989.0], [91.3, 1990.0], [91.4, 1991.0], [91.5, 1995.0], [91.6, 1996.0], [91.7, 1998.0], [91.8, 2001.0], [91.9, 2005.0], [92.0, 2007.0], [92.1, 2009.0], [92.2, 2011.0], [92.3, 2017.0], [92.4, 2019.0], [92.5, 2019.0], [92.6, 2020.0], [92.7, 2020.0], [92.8, 2020.0], [92.9, 2020.0], [93.0, 2021.0], [93.1, 2021.0], [93.2, 2022.0], [93.3, 2023.0], [93.4, 2023.0], [93.5, 2023.0], [93.6, 2024.0], [93.7, 2024.0], [93.8, 2024.0], [93.9, 2024.0], [94.0, 2024.0], [94.1, 2025.0], [94.2, 2025.0], [94.3, 2025.0], [94.4, 2025.0], [94.5, 2026.0], [94.6, 2026.0], [94.7, 2028.0], [94.8, 2030.0], [94.9, 2036.0], [95.0, 2036.0], [95.1, 2037.0], [95.2, 2040.0], [95.3, 2042.0], [95.4, 2042.0], [95.5, 2046.0], [95.6, 2052.0], [95.7, 2058.0], [95.8, 2061.0], [95.9, 2068.0], [96.0, 2071.0], [96.1, 2071.0], [96.2, 2072.0], [96.3, 2072.0], [96.4, 2072.0], [96.5, 2072.0], [96.6, 2072.0], [96.7, 2072.0], [96.8, 2073.0], [96.9, 2073.0], [97.0, 2073.0], [97.1, 2073.0], [97.2, 2074.0], [97.3, 2079.0], [97.4, 2080.0], [97.5, 2081.0], [97.6, 2082.0], [97.7, 2085.0], [97.8, 2086.0], [97.9, 2086.0], [98.0, 2087.0], [98.1, 2087.0], [98.2, 2087.0], [98.3, 2094.0], [98.4, 2095.0], [98.5, 2095.0], [98.6, 2104.0], [98.7, 2115.0], [98.8, 2120.0], [98.9, 2121.0], [99.0, 2125.0], [99.1, 2146.0], [99.2, 2146.0], [99.3, 2147.0], [99.4, 2147.0], [99.5, 2147.0], [99.6, 2148.0], [99.7, 2157.0], [99.8, 2157.0], [99.9, 2158.0]], "isOverall": false, "label": "gRPC", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 200.0, "maxY": 109.0, "series": [{"data": [[2100.0, 14.0], [600.0, 17.0], [700.0, 29.0], [800.0, 41.0], [200.0, 1.0], [900.0, 50.0], [1000.0, 80.0], [1100.0, 43.0], [300.0, 16.0], [1200.0, 69.0], [1300.0, 109.0], [1400.0, 92.0], [1500.0, 80.0], [400.0, 8.0], [1600.0, 83.0], [1700.0, 69.0], [1800.0, 64.0], [1900.0, 57.0], [500.0, 10.0], [2000.0, 68.0]], "isOverall": false, "label": "gRPC", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 2100.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 25.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 541.0, "series": [{"data": [[0.0, 25.0]], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 541.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 434.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 2.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 505.87800000000055, "minX": 1.74088434E12, "maxY": 505.87800000000055, "series": [{"data": [[1.74088434E12, 505.87800000000055]], "isOverall": false, "label": "5 concerrent Users", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.74088434E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 334.0, "minX": 1.0, "maxY": 2125.0, "series": [{"data": [[10.0, 1899.888888888889], [15.0, 1864.6], [21.0, 2048.333333333333], [24.0, 1568.6666666666667], [31.0, 1723.0000000000002], [37.0, 1754.2], [36.0, 2125.0], [38.0, 1537.0], [43.0, 2115.0], [42.0, 1926.75], [44.0, 1984.0], [49.0, 1802.0], [48.0, 1986.5], [50.0, 1791.0], [54.0, 1627.5], [56.0, 1741.0], [61.0, 1689.0], [60.0, 2023.25], [75.0, 2027.25], [74.0, 2086.5], [73.0, 1864.0], [72.0, 1922.4], [79.0, 1782.0], [78.0, 1981.3333333333333], [82.0, 1910.0], [81.0, 1859.5], [90.0, 1787.625], [103.0, 1771.5], [106.0, 1453.0], [107.0, 2072.0], [111.0, 1397.0], [110.0, 1913.5], [109.0, 1868.0], [108.0, 1969.25], [115.0, 1605.0], [114.0, 1948.5], [112.0, 1941.5555555555554], [117.0, 1753.0], [116.0, 2061.0], [120.0, 1678.0], [126.0, 2046.0], [125.0, 2052.0], [124.0, 1610.0], [134.0, 1867.3333333333333], [131.0, 1860.3333333333333], [128.0, 2042.0], [159.0, 1414.0], [157.0, 1888.0], [160.0, 2026.0], [175.0, 1741.6666666666667], [174.0, 1758.0], [173.0, 1749.3333333333335], [170.0, 2026.0], [183.0, 1937.0], [182.0, 1675.0], [181.0, 2016.0], [180.0, 1801.0], [179.0, 2024.0], [178.0, 1700.0], [177.0, 1569.6666666666667], [176.0, 1961.5], [189.0, 1939.0], [188.0, 1869.0], [186.0, 2023.0], [185.0, 1677.0], [184.0, 1429.0], [199.0, 1871.75], [198.0, 1910.0], [197.0, 1871.0], [196.0, 2021.0], [207.0, 1901.0], [206.0, 1779.0], [205.0, 1729.5], [203.0, 1583.0], [202.0, 1563.0], [201.0, 2008.0], [200.0, 1826.5], [213.0, 1990.0], [212.0, 1995.0], [211.0, 1787.0], [210.0, 1535.0], [209.0, 1915.0], [223.0, 1903.0], [222.0, 1766.0], [220.0, 1823.0], [218.0, 1314.0], [217.0, 1700.75], [239.0, 1761.0], [237.0, 1656.5], [236.0, 1701.75], [246.0, 1801.6666666666667], [244.0, 1979.0], [243.0, 1892.75], [242.0, 1819.5], [241.0, 1823.25], [248.0, 1855.0], [259.0, 1973.0], [271.0, 1712.0], [269.0, 1794.6666666666667], [267.0, 1621.6666666666667], [265.0, 1534.5], [264.0, 1675.0], [261.0, 1521.25], [260.0, 1847.0], [258.0, 1377.0], [256.0, 1668.8], [287.0, 1960.0], [286.0, 1719.8333333333333], [285.0, 1510.0], [274.0, 1522.0], [297.0, 1390.0], [296.0, 1616.25], [294.0, 1263.0], [291.0, 1956.0], [290.0, 1923.0], [289.0, 1533.4], [314.0, 1869.0], [313.0, 1816.0], [312.0, 1614.6], [307.0, 1877.0], [306.0, 1585.3333333333333], [305.0, 1454.75], [304.0, 1634.5], [335.0, 1866.0], [334.0, 1774.6666666666667], [332.0, 1716.25], [331.0, 1367.6666666666667], [333.0, 1865.0], [349.0, 1783.3333333333333], [350.0, 1530.0], [348.0, 1670.3333333333333], [339.0, 1271.3333333333333], [338.0, 1558.5], [336.0, 1713.0], [347.0, 1473.0], [346.0, 1793.0], [344.0, 1751.5], [343.0, 1795.0], [342.0, 1608.0], [340.0, 1864.0], [367.0, 1779.0], [364.0, 1347.0], [359.0, 1247.0], [358.0, 1667.25], [354.0, 1630.0], [382.0, 1599.0], [378.0, 1778.0], [377.0, 1390.0], [376.0, 1228.0], [374.0, 1442.0], [369.0, 1533.0], [368.0, 1240.0], [373.0, 1366.0], [372.0, 1837.25], [371.0, 1791.0], [370.0, 1521.0], [399.0, 1557.6666666666667], [396.0, 1136.0], [395.0, 1313.0], [394.0, 1429.2857142857144], [387.0, 1406.0], [415.0, 1617.875], [412.0, 1077.0], [408.0, 1739.0], [405.0, 1642.0], [404.0, 1728.0], [401.0, 1655.0], [431.0, 1457.0], [430.0, 1724.0], [418.0, 1107.5], [416.0, 1429.0], [447.0, 1673.6666666666667], [446.0, 1419.0], [439.0, 1392.0], [438.0, 1471.0], [437.0, 1601.0], [435.0, 1052.0], [433.0, 1277.5], [432.0, 1471.0], [461.0, 1463.4], [456.0, 1579.5], [453.0, 1725.0], [452.0, 1659.0], [455.0, 1723.0], [450.0, 1725.0], [449.0, 1224.0], [448.0, 1136.0], [478.0, 1511.6], [476.0, 1084.0], [467.0, 1683.0], [466.0, 1546.0], [465.0, 1252.5], [495.0, 1221.0], [494.0, 1349.0], [493.0, 1386.0], [490.0, 1527.0], [487.0, 1608.0], [484.0, 1078.0], [480.0, 1679.0], [509.0, 1367.0], [500.0, 1674.0], [499.0, 1087.0], [498.0, 1523.25], [496.0, 1267.6666666666667], [530.0, 1495.0], [539.0, 1590.2], [538.0, 1059.0], [537.0, 1660.0], [536.0, 1612.6666666666667], [527.0, 1541.0], [514.0, 1383.4444444444443], [513.0, 1666.0], [512.0, 1480.0], [524.0, 1015.0], [535.0, 1485.0], [532.0, 1353.0], [531.0, 1437.25], [529.0, 1022.0], [547.0, 1012.0], [563.0, 1431.0], [562.0, 1647.0], [561.0, 1648.0], [559.0, 1328.0], [554.0, 1350.0], [553.0, 1382.1666666666665], [546.0, 1451.3333333333335], [545.0, 1655.0], [604.0, 1537.0], [607.0, 1529.6666666666667], [603.0, 1311.0], [602.0, 1479.0], [599.0, 1016.8333333333333], [593.0, 1629.0], [592.0, 1228.5], [591.0, 1328.0], [583.0, 1342.5714285714287], [582.0, 1108.5], [580.0, 1050.0], [579.0, 1234.4285714285713], [578.0, 1643.0], [586.0, 1439.3333333333333], [628.0, 961.0], [627.0, 1569.0], [625.0, 1192.6], [620.0, 1252.857142857143], [619.0, 1201.0], [617.0, 1318.75], [616.0, 966.0], [669.0, 1244.769230769231], [670.0, 1142.0], [667.0, 1375.5], [666.0, 1562.0], [665.0, 949.0], [647.0, 1110.6], [646.0, 1564.0], [644.0, 1564.0], [643.0, 1497.0], [642.0, 971.0], [655.0, 1562.0], [653.0, 1375.5], [650.0, 1247.3333333333333], [649.0, 1562.0], [661.0, 979.0], [663.0, 1037.0], [660.0, 1345.0], [657.0, 1563.0], [656.0, 1524.0], [699.0, 1500.0], [701.0, 1119.0], [697.0, 1241.8], [674.0, 1536.0], [673.0, 1315.6666666666667], [692.0, 1049.0], [691.0, 918.0], [690.0, 1313.0], [689.0, 1466.0], [686.0, 1533.0], [685.0, 1126.3333333333333], [684.0, 1396.5], [683.0, 1478.0], [681.0, 1533.5], [724.0, 794.5], [731.0, 1382.0], [727.0, 1440.0], [726.0, 1442.0], [725.0, 1447.0], [722.0, 902.0], [721.0, 1192.0], [720.0, 1169.6666666666667], [717.0, 879.0], [706.0, 1302.0], [704.0, 1124.3333333333333], [710.0, 1440.0], [708.0, 1194.5], [716.0, 796.0], [715.0, 1231.0], [714.0, 1343.0], [713.0, 1473.0], [765.0, 1220.6666666666667], [766.0, 1170.0], [764.0, 831.0], [762.0, 1196.0], [761.0, 1233.3333333333333], [760.0, 1152.5], [759.0, 867.0], [763.0, 1437.0], [736.0, 1233.0], [775.0, 1436.5], [786.0, 1101.0], [798.0, 1395.0], [797.0, 1098.5714285714287], [774.0, 874.0], [773.0, 1020.0], [772.0, 1167.0], [771.0, 1436.0], [770.0, 1143.0], [769.0, 1115.0], [790.0, 852.0], [789.0, 1171.0], [787.0, 854.0], [785.0, 1157.0], [784.0, 1436.0], [783.0, 1059.0], [782.0, 1435.0], [781.0, 1050.0], [780.0, 806.0], [779.0, 1436.0], [778.0, 818.0], [777.0, 1437.0], [776.0, 1436.0], [818.0, 1004.0], [822.0, 803.0], [821.0, 1078.5], [819.0, 1033.0], [815.0, 762.0], [801.0, 1057.3333333333333], [814.0, 1286.0], [813.0, 1094.857142857143], [806.0, 1385.0], [805.0, 1174.75], [851.0, 893.0], [862.0, 1172.0], [848.0, 1112.6666666666667], [861.0, 980.0], [857.0, 1097.0], [856.0, 1216.0], [846.0, 1120.5], [835.0, 1300.0], [847.0, 740.0], [845.0, 1121.0], [844.0, 710.0], [843.0, 964.25], [842.0, 1320.5], [841.0, 864.5], [855.0, 1202.0], [853.0, 1163.5], [852.0, 1360.5], [850.0, 1132.3333333333333], [849.0, 811.0], [882.0, 1123.6666666666667], [895.0, 979.5], [894.0, 1007.3333333333334], [889.0, 1009.0], [887.0, 1310.0], [886.0, 1067.0], [884.0, 1006.5], [880.0, 1317.0], [878.0, 1290.5], [874.0, 1319.0], [873.0, 1074.7], [926.0, 1143.0], [927.0, 806.0], [925.0, 978.0], [924.0, 1126.0], [923.0, 923.6666666666666], [920.0, 933.5], [911.0, 660.0], [896.0, 1211.0], [900.0, 591.0], [899.0, 1064.5], [902.0, 1276.0], [901.0, 623.0], [906.0, 1259.0], [905.0, 1081.0], [904.0, 680.3333333333334], [916.0, 894.0], [914.0, 922.0], [913.0, 870.0], [912.0, 1044.5], [956.0, 1030.5], [958.0, 346.0], [954.0, 578.0], [951.0, 728.0], [948.0, 1036.0], [945.0, 493.75], [941.0, 761.5], [939.0, 775.6666666666666], [936.0, 840.6666666666667], [930.0, 708.5], [928.0, 1109.0], [991.0, 693.6666666666666], [990.0, 962.0], [987.0, 869.0], [986.0, 663.6666666666666], [982.0, 813.0], [977.0, 868.0], [967.0, 334.0], [1000.0, 606.6818181818181], [995.0, 338.0], [993.0, 971.5], [1.0, 2001.0]], "isOverall": false, "label": "gRPC", "isController": false}, {"data": [[505.87299999999937, 1411.5870000000007]], "isOverall": false, "label": "gRPC-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 1000.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 0.0, "minX": 1.74088434E12, "maxY": 411.56666666666666, "series": [{"data": [[1.74088434E12, 411.56666666666666]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.74088434E12, 0.0]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.74088434E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 1411.5870000000007, "minX": 1.74088434E12, "maxY": 1411.5870000000007, "series": [{"data": [[1.74088434E12, 1411.5870000000007]], "isOverall": false, "label": "gRPC", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.74088434E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 0.0, "minX": 1.74088434E12, "maxY": 4.9E-324, "series": [{"data": [[1.74088434E12, 0.0]], "isOverall": false, "label": "gRPC", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.74088434E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 0.0, "minX": 1.74088434E12, "maxY": 4.9E-324, "series": [{"data": [[1.74088434E12, 0.0]], "isOverall": false, "label": "gRPC", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.74088434E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 292.0, "minX": 1.74088434E12, "maxY": 2158.0, "series": [{"data": [[1.74088434E12, 2158.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.74088434E12, 292.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.74088434E12, 1979.0]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.74088434E12, 2124.96]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.74088434E12, 1436.0]], "isOverall": false, "label": "Median", "isController": false}, {"data": [[1.74088434E12, 2036.0]], "isOverall": false, "label": "95th percentile", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.74088434E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 1284.0, "minX": 291.0, "maxY": 1885.0, "series": [{"data": [[291.0, 1885.0], [709.0, 1284.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 709.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 0.0, "minX": 291.0, "maxY": 4.9E-324, "series": [{"data": [[291.0, 0.0], [709.0, 0.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 709.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 16.666666666666668, "minX": 1.74088428E12, "maxY": 16.666666666666668, "series": [{"data": [[1.74088428E12, 16.666666666666668]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.74088428E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 16.666666666666668, "minX": 1.74088434E12, "maxY": 16.666666666666668, "series": [{"data": [[1.74088434E12, 16.666666666666668]], "isOverall": false, "label": "200", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.74088434E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 16.666666666666668, "minX": 1.74088434E12, "maxY": 16.666666666666668, "series": [{"data": [[1.74088434E12, 16.666666666666668]], "isOverall": false, "label": "gRPC-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.74088434E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 16.666666666666668, "minX": 1.74088434E12, "maxY": 16.666666666666668, "series": [{"data": [[1.74088434E12, 16.666666666666668]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.74088434E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

